// TODO: UPDATE GAME DATA AFTER COMPLETED GAME

//TODO: on place if click and no move is made don't update player. 
//TODO: DLELET COMPUTE RAND PLAYER REDUCERS IF NOT NEEDED

const {
  connect,
  Provider
} = ReactRedux;
const {
  createStore,
  applyMiddleware,
  combineReducers
} = Redux;


//FIXME: save to local storage 

const model = {
  board: [{
    id: 0,
    piece: null
  }, {
    id: 1,
    piece: null
  }, {
    id: 2,
    piece: null
  }, {
    id: 3,
    piece: null
  }, {
    id: 4,
    piece: null
  }, {
    id: 5,
    piece: null
  }, {
    id: 6,
    piece: null
  }, {
    id: 7,
    piece: null
  }, {
    id: 8,
    piece: null
  }],
  //TODO: DELETE MODEL.WINS
  wins: [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ]
};
const myGameData = (typeof localStorage["gamedata"] !== "undefined") ? JSON.parse(localStorage["gamedata"]) : {
  wins: 0,
  losses: 0,
  ties: 0,
  numGames: 0
}
const resetGame = (winner) => {
  return {
    type: 'RESET',
    winner
  }
}

let initialChosenPiece = null;

{ /*ACTIONS */ }
const playPiece = (id, piece) => {
  return {
    type: 'PLACE',
    id,
    piece
  }
}
const setNextPlayer = (player) => {
  return {
    type: 'SET_NEXT_PLAYER',
    player
  }
}
const setPieces = (piece) => {
  let computerPiece = (piece === 'X') ? 'O' : 'X';
  return {
    type: 'SET_PIECES',
    playerPiece: piece,
    computerPiece
  }
}

{ /*REDUCERS*/ }
const rootReducer = (state, action) => {
    if (action.type === 'RESET') {
      if (action.winner === store.getState().computerPiece) {
        console.log('computer won')
        myGameData.losses++

      } else if (action.winner === store.getState().playerPiece) {
        myGameData.wins++
      } else if (action.winner !== store.getState().computerPiece || action.winner !== store.getState().computerPiece) {
        myGameData.ties++;
      }

      myGameData.numGames++
        state = undefined;
    }
    return appReducer(state, action);
  }
  //saves the first player in case of win where the first player will go first. 
const firstPlayer = (state = null, action) => {
  switch (action.type) {
    case 'SET_NEXT_PLAYER':
      if (action.playerPiece === 'O') {
        return 'player';
      } else {
        return 'computer'
      }
    default:
      return state;
  }
}

const player = (state = [], action) => {
  switch (action.type) {
    case 'PLACE':
      if (action.piece === store.getState().pieces.playerPiece) {
        return [...state, action.id]
      }
      return state;
    case 'RESET':
      let emptyArray = [];
      return emptyArray;
    default:
      return state;
  }
}
const winner = (state = null, action) => {
  switch (action.type) {
    case 'RESET':
      if (!!action.winner) {

        return action.winner;
      } else {
        return state;
      }
    default:
      return state;
  }
}
const computer = (state = [], action) => {
  switch (action.type) {
    case 'PLACE':
      if (action.piece === store.getState().pieces.computerPiece) {
        return [...state, action.id]
      }
      return state;
    case 'RESET':
      let emptyArray = [];
      return emptyArray;
    default:
      return state;
  }
}
const piece = (state, action) => {
  switch (action.type) {

    case 'PLACE':
      if (!state.piece && state.id === action.id) {
        return {
          id: state.id,
          piece: action.piece
        };
      }
      return state;
    default:
      return state;
  }
}
const pieces = (state = {}, action) => {
  switch (action.type) {
    case 'SET_PIECES':
      /*return {
          ...state
          ...action
      };
      */
      return state;
    case 'RESET':
      let emptyObj = {};
      return emptyObj;
    default:
      return state;
  }
}
const board = (state = model.board, action) => {
  switch (action.type) {
    case 'PLACE':
      return state.map(p => piece(p, action));
    case 'RESET':
      return model.board;
    default:
      return state;
  }
}
const currentPlayer = (state = null, action) => {
  switch (action.type) {
    case 'SET_NEXT_PLAYER':
      return action.player;
      /*case 'RESET':
         !!store.getState().winner ? store.
         */
    default:
      return state;
  }
}
const checkWin = () => {
  let player = store.getState().firstPlayer;
  let board = store.getState().board;

  function check(a, b, c) {
    let joins = [a, b, c].join('');
    return !!(joins).match(/(XXX|OOO)/gi)
  }

  if (check(board[0].piece, board[1].piece, board[2].piece)) {
    store.dispatch(resetGame(board[0].piece))
  }
  if (check(board[3].piece, board[4].piece, board[5].piece)) {
    highlightWinningCombos(3, 4, 5)
    store.dispatch(resetGame(board[3].piece))
  }
  if (check(board[6].piece, board[7].piece, board[8].piece)) {
    store.dispatch(resetGame(board[6].piece))
  }
  if (check(board[0].piece, board[3].piece, board[6].piece)) {
    store.dispatch(resetGame(board[0].piece))
  }
  if (check(board[1].piece, board[4].piece, board[7].piece)) {
    store.dispatch(resetGame(board[1].piece))
  }
  if (check(board[2].piece, board[5].piece, board[8].piece)) {
    store.dispatch(resetGame(board[2].piece))
  }
  if (check(board[0].piece, board[4].piece, board[8].piece)) {
    store.dispatch(resetGame(board[0].piece))
  }
  if (check(board[2].piece, board[4].piece, board[6].piece)) {
    store.dispatch(resetGame(board[2].piece))
  } else {
    let tie = board.every(item => {
      if (item.piece) {

        return true;
      }

    })
    if (tie) {

      store.dispatch(resetGame('tie'))
      store.dispatch(setNextPlayer(player))

    }
  }

}

class Board extends React.Component{
  render(){
    let rows = [];
    //FIXME!!!!!!!
    {model.board.map(item => {
      rows.push(
        <Square 
      key={item.id} 
      handleClick={place}
      id={item.id}
      {...item}

      >
      </Square>
      )
    })}
    return (
      <div>
          <div className="container board-container">
        {rows}
          </div>

      </div>
    );
  }
}


const Square = ({
  id,
  piece,
  handleClick
}) => ( <
  div className = "card hoverable valign-wrapper"

  onClick = {
    () => {
      handleClick(id);
    }
  } >
  <span className="valign">{piece}</span> 
    </div>
);

//TODO: HOOK PLAYER HISTORY TO STORE
const PlayerHistory = ({
  wins,
  losses,
  ties
}) => (
  <ul id="dropdownData" className="dropdown-content">
		<li>Wins: <span className="unit">{wins}</span></li>
		<li className="divider"></li>
		<li>Losses: <span className="unit">{losses}</span></li>
		<li className="divider"></li>
		<li>Ties: <span className="unit">{ties}</span></li>
		<li className="divider"></li>
  </ul>

);

const StartGameButton = ({
  beginGame,
  gameData
}) => (

  <div className="fixed-action-btn right"> 
        
        <a className="btn-floating btn-large menu">
          <i className="large material-icons">add</i>
        </a>
        <ul>
            <li><a className="dropdown-button btn-floating btn-large waves-circle waves-light"
              href="#" 
              data-activates="dropdownData"
              data-hover="true"
            >
              DATA
              </a>
              <PlayerHistory {...gameData}/>
             </li>
             <li className="btn-floating btn-large waves-circle waves-light ">
                <a
                    href="#"
                    onClick={() => {
                        store.dispatch({type: 'RESET' });        
                    }}    
            >
                <i className="material-icons">refresh</i>
            </a>
            </li>
          <li onClick={ () => {
				beginGame('O');
              }}
          >
            <a className="btn-floating red waves-effect waves-light waves-red" >
              O
            </a>
          </li>
          <li  onClick={ () => {
				beginGame('X');
              }}
          >
            <a className="btn-floating blue waves-effect waves-light waves-blue">
              X
            </a>
          </li>
           
        </ul>
  </div>

);
const startGame = (
  id
) => {
  store.dispatch(setPieces(id));
  initialChosenPiece = id;
  let playerChosenPiece = store.getState().pieces.playerPiece;
  let computerPiece = store.getState().pieces.computerPiece;
  if (computerPiece === 'O') {
    store.dispatch(setNextPlayer('computer'));
    Materialize.toast('COMPUTER GOES FIRST', 1500, '', computerPlay)
    return;
  }
  store.dispatch(setNextPlayer('player'));
  Materialize.toast('GO FIRST', 2000);
  return;

}
const computerPlay = () => {
  const preferredPlay = [4, 0, 8, 2, 6, 3, 1, 7, 5];
  let computerPiece = store.getState().pieces.computerPiece;
  let computer = store.getState().computer;
  let player = store.getState().player;
  let allowedPlays = [];
  let playedWinningMove = false;
  let playedBlockingMove = false;
  preferredPlay.filter(item => {
    if (player.indexOf(item) === -1 && computer.indexOf(item) === -1) {
      allowedPlays.push(item)

    }

  });

  let possibleWinCombos = [];
  model.wins.forEach(winCombo => {
    let count = 0;

    winCombo.forEach(w => {
      if (computer.indexOf(w) !== -1) {
        count++;
      }
    });
    if (count === 2) {
      possibleWinCombos.push(winCombo);
    }
  });

  possibleWinCombos.forEach(combo => {
    let emptySpaces = 0;
    let emptySpaceLocation = '';

    combo.forEach(c => {
      if (player.indexOf(c) === -1 && computer.indexOf(c) === -1) {
        emptySpaces++;
        emptySpaceLocation = c;
      }
    });
    if (emptySpaces === 1) {
      playedWinningMove = true;
      store.dispatch(playPiece(emptySpaceLocation, computerPiece))
      store.dispatch(setNextPlayer('player'));
      checkWin();
      return;

    }

  });

  let possibleBlockCombos = [];
  model.wins.forEach((blockCombo, i) => {
    let count = 0;

    blockCombo.forEach(w => {
      if (player.indexOf(w) !== -1) {
        count++;
      }
    });
    if (count === 2) {
      possibleBlockCombos.push(blockCombo);
    }
  });

  possibleBlockCombos.forEach(combo => {
    let emptySpaces = 0;
    let emptySpaceLocation = '';

    combo.forEach(c => {
      if (player.indexOf(c) === -1 && computer.indexOf(c) === -1) {
        emptySpaces++;
        emptySpaceLocation = c;
      }
      if (emptySpaces === 1 && !playedWinningMove) {
        playedBlockingMove = true;
        store.dispatch(playPiece(emptySpaceLocation, computerPiece))
        store.dispatch(setNextPlayer('player'));
        checkWin();
        return;

      }
    });
  });

  if (!playedWinningMove && !playedBlockingMove) {
    store.dispatch(playPiece(allowedPlays[0], computerPiece));
    store.dispatch(setNextPlayer('player'));
    checkWin();
    return;

  }

}

const place = (
  id

) => {
  let computerPiece = store.getState().pieces.computerPiece;
  let playerPiece = store.getState().pieces.playerPiece;
  let board = store.getState().board;
  let currentPlayer = store.getState().currentPlayer;

  if (currentPlayer === 'player') {

    store.dispatch(playPiece(id, playerPiece));
    checkWin();
    store.dispatch(setNextPlayer('player'));
    computerPlay(); { /* Materialize.toast('spot already taken ' , 2000) */ }
  }
}

const App = () => {
  return (
    <div className="container">
    <div className="row">
      <Board/>
      </div>
      <div className="row">
         <StartGameButton 
        gameData={myGameData}
			  beginGame={startGame}
		  />
      </div>
      </div>
  );
}

ReactDOM.render(
  <Provider store={store}>
      <App/>
    </Provider>,
  document.getElementById('root')
);

const appReducer = combineReducers({
  board,
  currentPlayer,
  pieces,
  player,
  computer,
  winner,
  firstPlayer

});

let store = createStore(rootReducer, '', window.devToolsExtension ? window.devToolsExtension() : undefined);

$('.dropdown-button').dropdown({
  inDuration: 300,
  outDuration: 225,
  constrain_width: false, // Does not change width of dropdown to that of the activator
  hover: true, // Activate on hover
  gutter: 0, // Spacing from edge
  belowOrigin: false, // Displays dropdown below the button
  alignment: 'left' // Displays dropdown with edge aligned to the left of button
});