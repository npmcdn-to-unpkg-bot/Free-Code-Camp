var audio1 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound1.mp3');
var audio2 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound2.mp3');
var audio3 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound3.mp3');
var audio4 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound4.mp3');
var audioBuzzer = new Audio('https://s3-us-west-2.amazonaws.com/guylemon/Buzzer.mp3');

function beep(audio) {
  // Plays the correct audio file.
  //
  switch (audio) {
    case 'red':
      audio1.play();
      break;
    case 'green':
      audio2.play();
      break;
    case 'blue':
      audio3.play();
      break;
    case 'yellow':
      audio4.play();
      break;
    default:
      audioBuzzer.play();
      break;
  }
}

const {
  connect,
  Provider
} = ReactRedux;
const {
  createStore,
  combineReducers
} = Redux;
//actions
const sendPlayerChoice = (choice) => {
  return {
    type: 'CLICK',
    choice
  };
}
const newRound = (choice) => {
  return {
    type: 'NEW_ROUND',
    choice
  };
}
const increaseSpeed = () => {
  return {
    type: 'INCREASE'
  };
}
const lightUpButton = (color) => {
  return {
    type: 'LIGHT_UP',
    color
  };
}
const removeLight = (color) => {
  return {
    type: 'REMOVE_LIGHT',
    color
  }
}
const displayMoves = () => {
  return {
    type: 'START_DISPLAY'
  }
}
const stopDisplay = () => {
    return {
      type: 'STOP_DISPLAY'
    }
  }
  //reducers
const round = (state = 0, action) => {
  switch (action.type) {
    case 'NEW_ROUND':
      return state + 1;
    default:
      return state;
  }
}
const speed = (state = 1200, action) => {
  switch (action.type) {
    case 'INCREASE':
      return state * 1.2;
    default:
      return state;
  }
}
const computerArray = (state = [], action) => {
  switch (action.type) {
    case 'NEW_ROUND':
      return [...state, action.choice]
    default:
      return state;
  }
}
const playerArray = (state = [], action) => {
  switch (action.type) {
    case 'CLICK':
      return [...state, action.choice];
    case 'NEW_ROUND':
      return [];
    default:
      return state;
  }
}
const activeButton = (state = '', action) => {
  switch (action.type) {
    case 'LIGHT_UP':
      return action.color;
    case 'REMOVE_LIGHT':
      return '';
    default:
      return state;
  }
}
const buttonsActive = (state = false, action) => {
  switch (action.type) {
    case 'START_DISPLAY':
      return false;
    case 'STOP_DISPLAY':
      return true;
    default:
      return state;
  }
}
const startGame = () => {
  if (store.getState().round === 0) {
    updateRound();
  }
}
const compareArrays = () => {
  let computerArray = store.getState().computerArray;
  let equalArrays = store.getState().playerArray.every((choice, i) => {
    return choice === computerArray[i];
  });
  if (!equalArrays) {
    beep();
    store.dispatch({
      type: 'RESET'
    })
  }
  if (store.getState().playerArray.length === computerArray.length || round === 0) {
    updateRound();
  }
}
const updateRound = () => {
  let random = Math.floor(Math.random() * 4);
  let colors = ['green', 'red', 'blue', 'yellow'];
  let randz = colors[random];
  switch (store.getState().round) {
    case 4:
    case 8:
    case 13:
      store.dispatch(newRound(randz));
      store.dispatch(increaseSpeed());
      break;
    case 20:
      store.dispatch({
        type: 'RESET'
      });
      break;
    default:
      store.dispatch(newRound(randz))
      break;
  }
  lightUpTiles();
  return;
}
const lightUp = (id) => {
  console.log('lightUp called, id: ', id)
  store.dispatch(lightUpButton(id))
   beep(id);
  setTimeout(remLight, store.getState().speed / 2);

}
const remLight = (id) =>{
  store.dispatch(removeLight(id));
}
const lightUpTiles = () => {

  console.log('lightUpTiles called');
  store.dispatch(displayMoves())
  let computerArray = store.getState().computerArray;
  /*
  let r = store.getState().round;
  let rArr = [0]
  const ret = () =>{
    if(r >= 1){
    rArr.push(r)
    r--;
  }
    return rArr;
  } 
  for (let i = 0, ln = computerArray.length; i < ln; i++){
    setTimeout((y) =>{
      lightUp(computerArray[y])
          store.dispatch(stopDisplay())
    }, i * 1000, ...rArr)
  }
        

  */
  let i = 0;
  var interval = setInterval(() => {
    lightUp(computerArray[i]);
    i++;
       if (i >= computerArray.length) {
      clearInterval(interval);
      store.dispatch(stopDisplay())
    }
   
  }, store.getState().speed);
 
}

//presentational components

const Board = () => (
  <div className="col-xs-8 board">
    <div className="row">
      <div className="buttons col-xs-10">
          <div className="row">
            <Button color="green"/>
            <Button color='red'/>
                      </div>
          <div className="row">
            <Button color='yellow'/>
            <Button color='blue'/>
          </div>
      </div>
      <div className="row">
           <Controller/>
        </div>
    </div>
  </div>

);
//TODO fix variable callout for new ES6 specs
const Button_ = ({
  active,
  color,
  handleClick,
  buttonsActive
}) => {
  let klass = active ? 'btn-active btn-' + color : 'btn-' + color;
  let disabled = !!buttonsActive ? false : true;
  return ( <
    button className = {
      "col-xs-5 btn btn-game " + klass
    }
    disabled = {
      disabled
    }
    onClick = {
      e => {
        e.preventDefault();
        handleClick(color);
        compareArrays();
        lightUp(color)
      }
    } >
    < /button>
  );
}
const mapStateToProps_1 = (state, ownProps) => {
    return {
      active: state.activeButton === ownProps.color,
      buttonsActive: state.buttonsActive
    }
  }
  //TODO: UPDATE
const mapDispatchToProps_1 = (dispatch) => {
  return {
    handleClick: (color) => {
      dispatch(sendPlayerChoice(color))
    }
  }
}
const Button = connect(mapStateToProps_1, mapDispatchToProps_1)(Button_);
const GameInfo_ = ({
  round
}) => (

  <div className='gameInfo' >
				<span>{round}</span>
			</div>
);
const mapStateToProps_2 = (state) => {
  return {
    round: state.round
  };
}
const GameInfo = connect(mapStateToProps_2, '')(GameInfo_)
const Controller = () => (
  <div className="controller col-xs-3">
      <div className="row">
    <h4>Simon</h4>
    </div>
    <div className="row">
    <GameInfo />
      <button className="btn btn-start"
        onClick={startGame}
        >
       </button>
    </div>
  
    </div>
);
const app = combineReducers({
  round,
  speed,
  computerArray,
  playerArray,
  activeButton,
  buttonsActive
})
const rootReducer = (state, action) => {
  if (action.type === 'RESET') {
    state = undefined;
  }
  return app(state, action);
}
let store = createStore(rootReducer, '', window.devToolsExtension ? window.devToolsExtension() : undefined);

ReactDOM.render(
  <Provider store={store}>
		<Board />
	</Provider>,
  document.querySelector('#root')
);