var audio1 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound1.mp3');
var audio2 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound2.mp3');
var audio3 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound3.mp3');
var audio4 = new Audio(
  'http://s3.amazonaws.com/freecodecamp/simonSound4.mp3');
var audioBuzzer = new Audio('https://s3-us-west-2.amazonaws.com/guylemon/Buzzer.mp3');
function beep(audio) {
  // Plays the correct audio file.
  //
  switch (audio) {
    case 'red':
      audio1.play();
      break;
    case 'green':
      audio2.play();
      break;
    case 'blue':
      audio3.play();
      break;
    case 'yellow':
      audio4.play();
      break;
    default:
      audioBuzzer.play();
      break;
  }
}

const { connect, Provider } = ReactRedux;
const { createStore, combineReducers } = Redux;
//actions
const sendPlayerChoice = (choice) =>{
	return{
		type: 'CLICK',
		choice
	};
}
const newRound = (choice) =>{
	return{
		type: 'NEW_ROUND',
		choice
	};	
}
const increaseSpeed = () =>{
	return{
		type: 'INCREASE'
	};
}
const lightUpButton = (color) =>{
	return{
		type: 'LIGHT_UP',
		color
	};
}
const removeLight = (color) =>{
	return{
		type: 'REMOVE_LIGHT',
		color
	}
}
const displayMoves = () =>{
	return{
		type: 'START'
	}
}
const stopDisplay = () =>{
	return{
		type: 'STOP'
	}
}
//reducers
const round = (state = 0, action) =>{
	switch(action.type){
		case 'NEW_ROUND':
			return state + 1;
		default:
			return state;
	}
}
const speed = (state = 1200, action) =>{
	switch(action.type){
		case 'INCREASE':
			return state * 1.2;
		default:
			return state;
	}
}
const computerArray = (state = [], action) =>{
	switch(action.type){
		case 'NEW_ROUND':
			return [...state, action.choice]
		default:
			return state;
	}
}
const playerArray = (state = [], action) =>{
	switch(action.type){
		case 'CLICK':
			return [...state, action.choice];
		case 'NEW_ROUND':
			return [];
		default:
			return state;
	}
}
const activeButton = (state = '', action) =>{
	switch(action.type){
		case 'LIGHT_UP':
			return action.color;
		case 'REMOVE_LIGHT':
			return '';
		default:
			return state;
	}
}
const buttonsActive = (state = false, action) =>{
  switch(action.type){
    case 'START':
      return false;
    case 'STOP':
      return true;
    default: 
      return state;
  }
}
const startGame = () =>{
  if(store.getState().round === 0){
    updateRound();
  }
}
const compareArrays = () =>{
	let computerArray = store.getState().computerArray;
	let equalArrays = store.getState().playerArray.every((choice, i) => {
		 return choice === computerArray[i];
  });
	if (!equalArrays){
    beep();
    store.dispatch({type: 'RESET'})
	}if (store.getState().playerArray.length === computerArray.length || round === 0){
    updateRound();
  }
}
const updateRound = () =>{
  	let random = Math.floor(Math.random() * 4);
  let colors = ['green', 'red', 'blue', 'yellow'];
  let randz = colors[random];
 switch(store.getState().round){
   case 4:
   case 8:
   case 13:
     store.dispatch(newRound(randz));
     store.dispatch(increaseSpeed());
     lightUpTiles();
     break;
   case 20:
    store.dispatch({type: 'RESET'});
     break;
   default:
     store.dispatch(newRound(randz))
     break;
 }
    lightUpTiles();
}
const lightUp = (id) =>{
    beep(id);
		store.dispatch(lightUpButton(id))
		setTimeout( () =>{
			store.dispatch(removeLight(id));
		}, store.getState().speed / 2);
				
}
const lightUpTiles = () =>{
	store.dispatch(displayMoves())
	let computerArray = store.getState().computerArray;
	let i = 0;
	var interval = setInterval( () =>{
		lightUp(computerArray[i])
		i++
		if (i === computerArray.length){
			clearInterval(interval);
			store.dispatch(stopDisplay())
		}
	}, store.getState().speed);
}

//presentational components

const Background = () =>(
			<div>
				<Board />
				<Controller />
			</div>
);
const Board = () =>(
  <div className="btns">
    <Button color="green"/>
    <Button color='red'/>
    <br></br>
    <Button color='yellow'/>
    <Button color='blue'/>
  </div>
);
//TODO fix variable callout for new ES6 specs
const Button_ = ({
	active,
	color,
	handleClick,
  buttonsActive
}) =>{
  let klass = active ? 'active ' + 'btn-' + color : color;  
  let disabled = !!buttonsActive ? false : true;
	return(
		<button 
      className={"btn btn-" + klass}
			disabled={disabled}
      onClick={e =>{
				e.preventDefault();
        handleClick(color);
        compareArrays();
        lightUp(color)
			}}
		></button>
	);
}
const mapStateToProps_1 = (state, ownProps) =>{
	return{
		active: state.activeButton === ownProps.color,
    buttonsActive: state.buttonsActive
	}
}
//TODO: UPDATE
const mapDispatchToProps_1 = (dispatch) =>{
	return{
		handleClick: (color) => {
			dispatch(sendPlayerChoice(color))
		}	
	}
}
const Button = connect(mapStateToProps_1, mapDispatchToProps_1)(Button_);
const GameInfo_ = ({round}) =>(
  
			<div className='gameInfo' >
				<p>{round}</p>
			</div>
  );
const mapStateToProps_2 = (state) =>{
  return{
    round: state.round
  };
}
const GameInfo = connect(mapStateToProps_2, '')(GameInfo_)
const Controller = () =>(
    <div className="controller">
    <GameInfo />
    <h4>Simon</h4>
      <button className="btn btn-start"
        onClick={startGame}
        >
       </button>
      </div>
  );
const app = combineReducers({
	round,
	speed,
	computerArray,
	playerArray,
	activeButton,
  buttonsActive
})
const rootReducer = (state, action) =>{
  if (action.type === 'RESET'){
    state = undefined;
  }
  return app(state, action);
}
let store = createStore(rootReducer, '', window.devToolsExtension ? window.devToolsExtension() : undefined);

ReactDOM.render(
	<Provider store={store}>
		<Background />
	</Provider>,
	document.querySelector('#root')
);
