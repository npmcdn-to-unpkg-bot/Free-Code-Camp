const {
  connect,
  Provider
} = ReactRedux;
const {
  createStore,
  applyMiddleware,
  combineReducers
} = Redux;
const addTime = (time, value) => {
  console.log(time, value);
  return {
    type: 'CHANGE_CLOCK',
    time,
    value
  };
}
const startTimer = () => {
  return {
    type: 'START'
  };
}
const resetTimer = () => {
  return {
    type: 'RESET_TIMER'
  };
}
const countdown = (session) => {
  return {
    type: 'COUNTDOWN',
    session
  }
}
const toggleSession = () => {
  return {
    type: 'TOGGLE'
  };
}
function updateTimer() {
  const updater = () => {
    let session = store.getState().activeSession;
    if (!store.getState().isRunning) {
      return clearInterval(interval);
    } else {
      if (session === 'study' && store.getState().studyTimeRemaining < 1) {
        return store.dispatch(toggleSession());
      }if (session === 'break' && store.getState().breakTimeRemaining < 1) {
        return store.dispatch(toggleSession());
      }
      store.dispatch(countdown(activeSession))
    }
  }
  let interval = setInterval(updater, 1000);
}
const studyMinutes = (state = 25, action) => {
  switch (action.type) {
    case 'CHANGE_CLOCK':
      if (!!state) {
        if (action.time === 'study') {
          return (action.value === 1) ? state + 1 : state - 1;
        }
        return state;
      } else if (state === 0 && action.value === 1) {
        return 1;
      }
      return state;
    default:
      return state;
  }
}
const studyTimeRemaining = (state = 1500, action) => {
  switch (action.type) {
    case 'START':
      return store.getState().studyMinutes * 60;
    case 'COUNTDOWN':
      if (store.getState().activeSession === 'study') {
        while (state) {
          return state - 1;
        }
        return 0;
      }
      return state;
    case 'TOGGLE':
      if (store.getState().activeSession === 'study') {
        return store.getState().studyMinutes * 60;
      }
      return state;
    default:
      return state;
  }
}
const breakMinutes = (state = 5, action) => {
  switch (action.type) {
    case 'CHANGE_CLOCK':
      if (!!state) {
        if (action.time === 'break') {
          return (action.value === 1) ? state + 1 : state - 1;
        }
        return state;
      } else if (state === 0 && action.value === 1) {
        return 1;
      }

      return state;
    default:
      return state;
  }
}
const breakTimeRemaining = (state = 300, action) => {
    switch (action.type) {
      case 'START':
        return store.getState().breakMinutes * 60;
      case 'COUNTDOWN':
        if (store.getState().activeSession === 'break') {

          while (state) {
            return state - 1;
          }
          return 0; // TODO CHANGE TO STARTING BREAK TIME
        }
        return state;
      case 'TOGGLE':
        if (store.getState().activeSession === 'break') {

          return store.getState().breakMinutes * 60;
        }
        return state;
      default:
        return state;
    }
  }
const isRunning = (state = false, action) => {
  switch (action.type) {
    case 'START':
      return true;
    default:
      return state;
  }
}
const activeSession = (state = 'study', action) => {
  switch (action.type) {
    case 'TOGGLE':
      let newState = state == 'study' ? 'break' : 'study';
      return newState;
    default:
      return state;
  }
}

class Card_ extends React.Component {
  constructor(props) {
    super();
  }
  render() {
     return (
      <div className={'container'}>
          <Controller />
        <Status />
        </div>
    );
  }
}
const mapStateToProps_3 = ({
  activeSession
}) => {
  return {
    activeSession: store.getState().activeSession
  };
}
const Card = connect(mapStateToProps_3)(Card_);
const Controller_ = ({
  breakMinutes,
  studyMinutes,
  changeTime,
  studyTimeRemaining,
  breakTimeRemaining,
  isRunning,
  activeSession
}) => {
  let studyText = !!isRunning && activeSession === 'study' ? `${studyTimeRemaining} seconds` : `Study: ${studyMinutes} minutes`;
  let breakText = !!isRunning && activeSession === "break" ? `${breakTimeRemaining} seconds` : `Break: ${breakMinutes} minutes`;
  return (
    <div className="container-fluid material-orange">
                  <MusicButton/>
      <div className="row">
          <Button onClick
        onClick={changeTime.bind(this, 'study', 1)}
      >+</Button>
      <Button  
        onClick={changeTime.bind(this, 'study', -1)} 
      >-</Button>
                     <span>{studyText}</span>
          <br></br>
      <Button 

        onClick={changeTime.bind(this, 'break', 1)}>+</Button>
      <Button
        onClick={changeTime.bind(this, 'break', -1)} >-</Button>
                      <span>{breakText}</span>

         </div>
    </div>
  );
}
const mapStateToProps_1 = (state) => {
  return {
      studyTimeRemaining: state.studyTimeRemaining,
    breakTimeRemaining: state.breakTimeRemaining,
    studyMinutes: state.studyMinutes,
    breakMinutes: state.breakMinutes,
    isRunning: state.isRunning,
    activeSession: state.activeSession
  };
}
const mapDispatchToProps_1 = (dispatch) => {
  return {
    changeTime: (time, value) => dispatch(addTime(time, value))

  }
}
const Button_ = ({children, onClick, isTimerRunning}) =>(
<button
   className='btn material-red' 
        hidden={ !!isTimerRunning ? true : false}
  onClick={e =>{
      e.preventDefault()
      onClick()
    }}
>{children}</button>

);
const mapStateToProps_button = (state) =>{
  return{
    isTimerRunning: state.isRunning
  };
}
const Button = connect(mapStateToProps_button)(Button_)
const Controller = connect(mapStateToProps_1, mapDispatchToProps_1)(Controller_);

const Status_ = ({
  resetTimer,
  activeSession,
  isRunning
}) => {
   
  let text = !!isRunning ? 'STOP' : 'START';
  return (
    <div>
      <button 
        className={`btn startGame material-red`}
        onClick={ ()=>{
          !isRunning ? store.dispatch(startTimer()) :
            store.dispatch(resetTimer())
            updateTimer()
        }}
      >{`${text}`}</button>
              
        </div>
  );
}
const mapStateToProps_status = (state) => {
  return {
    activeSession: state.activeSession,
    isRunning: state.isRunning
  }
}
const mapDispatchToProps_2 = (dispatch) => {
  return {
    resetTimer: () => dispatch(resetTimer())
  }
}
const Status = connect(mapStateToProps_status, mapDispatchToProps_2)(Status_);


const MusicButton = () =>{


    var playlist_url = 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/users/45129349/favorites&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=false&amp;show_user=true&amp;show_reposts=false';
 
  return(
    <div>

     <button type="button" 
       className="btn music-button"
       data-toggle="modal" 
       data-target="#music"
       >
<i className="material-icons">play_arrow</i>
      </button>
      <div className="modal fade"
           id="music" 
        >
                <div className="modal-body">
              <iframe className="music" 
                width="100%" 
                scrolling="no" 
                frameborder="no" 
                src={`${playlist_url}`}
                ></iframe>
            </div>
      </div>
    </div>
    
   );
}
  
const Header = () =>(
  <div className="container-fluid title">
   <img 
     className="cols-xs-12"
     src="http://fontmeme.com/embed.php?text=Pomdoro%20Timer&name=True Lies.ttf&size=100&style_color=15155E" 
     alt="Pomdoro Timer"/>
    </div>
);

const app = combineReducers({
  studyMinutes,
  breakMinutes,
  isRunning,
  activeSession,
  studyTimeRemaining,
  breakTimeRemaining
});
const rootReducer = (state, action) => {
  if (action.type === 'RESET_TIMER') {
    console.log('reset timer called');
    state = undefined;
  }
  return app(state, action);

}
const App = () =>(
<div>
  <Header/>
  <Card/>
  </div>
  
)
let store = createStore(rootReducer, '', window.devToolsExtension ? window.devToolsExtension() : undefined);
ReactDOM.render(
  <Provider store={store}>
      <App />
    </Provider>,
  document.getElementById('root')
);
window.onresize = resizeWindow;
function resizeWindow(){
  let w = window.innerWidth;
  let h = window.innerHeight;
  
  $('#root').height(h);
  $('#root').width(w);
}

resizeWindow();

