const {
  connect,
  Provider
} = ReactRedux;
const {
  createStore,
  applyMiddleware,
  combineReducers
} = Redux;
const recipes = () => {
  if(!!localStorage['recipelist']){
    return JSON.parse(localStorage['recipelist'])
  }
    let rec = [{
      title: 'Taco',
      ingredients: ['Beef', 'Seasoning', 'Tortilla'],
      directions: ' add'
    }, {
      title: 'Chicken Noodle Soup',
      ingredients: ['Chicken', 'Onion', 'Carrots', 'Celery', 'noodles'],
      directions: 'add'
    }, ];
    return rec;

  }

  //ACTIONS
const newRecipe = (title, ingredients, directions) => {
  return {
    type: 'NEW_RECIPE',
    title,
    ingredients,
    directions,
  }
}
const delRecipe = (title) => {
    return {
      type: 'DELETE_RECIPE',
      title
    } 
  }
  //Reducers
const recipesReducer = (state, action) => {
  switch (action.type) {
    case 'NEW_RECIPE':
      return [
        ...state,{
        title: action.title,
        ingredients: action.ingredients,
        directions: action.directions
      }
      ];
    case 'DELETE_RECIPE':
      return state.filter(s => s.title !== action.title);
    default:
      return state;
  }
}

const RecipeList_ = ({
  list
}) => {
  let rl = store.getState();
  let rec = [];
  list.forEach(r => {
    rec.push(<Recipe reci={r}/>);
  })
  return (
    <div>
      {rec}
  </div>
  );
}
const mapStateToProps_RecipeList = (state) => {
  return {
    list: state
  }
}
const RecipeList = connect(mapStateToProps_RecipeList)(RecipeList_);
const Recipe = ({
  reci
}) => {
  let i = [];
  let d = [];
  reci.ingredients.forEach(ing => {
    i.push(<li>{ing}</li>)
  });
  
  
  let klass = reci.title.replace(/\s/g, '-');
  return (
    <div className="row">
        <div className="card col-xs-12 col-md-4 col-lg-2">
          <div className="row">
            <h4><a className="btn btn-primary" data-toggle="collapse" href={`#${klass}`}>{reci.title}</a></h4>
            <button className="btn" 
              onClick={() => deleteRecipe(klass)}>
              Delete
            </button>
          </div>
          <div className="collapse" id={klass}>
          <h6>Ingredients</h6>
        <ul>
          {i}
        </ul>
          <h5>Directions</h5>
          <p>{reci.directions}</p>
          </div>
        </div>
    </div>
  )
}
const AddRecipeButton = () => (
  <div>
      <button type="button" className="btn btn-floating" data-toggle="modal" data-target="#addRecModal">          <i className="material-icons">add</i>
      </button>
        <div className="modal fade" id="addRecModal">
        <div className="modal-body">
          <form 
            className="form"
            onSubmit={e=>{
                e.preventDefault();
              addRecipe();
            }}>
            <div className="form-group row">
              <label for="title" className="col-form-label col-xs-2">Title:</label>
              <div className="col-xs-10">
              <input className="form-control" name="title" type="text"></input>
              </div>
            </div>
            <div className="form-group row">
            <label for="ingredients" className="col-form-label col-xs-2">Ingredients:</label>
            {/*TODO MAKE INGREDIENTS A LIST OF ITEMS*/}
                            <div className="col-xs-10">
            <input className="form-control col-xs-8" name="ingredients" type="text"/>
            </div>
            </div>
            <div className="form-group row">
            <label for="directions" className="col-form-label  col-xs-2">Directions:</label>
              <div className="col-xs-10">
              <input className="form-control" name="directions" type="text"/>
              </div>
            </div>
            <div className="form-group row">
              <button className="btn" data-toggle="modal" data-target="#addRecModal">add</button>
            </div>
          </form>
         </div>
    </div>
  </div>
);

function addRecipe() {
  $('.modal').toggle();
  let f = $('.form').serializeArray();
  let [t, ing, dir] = f;
  let ingArr = ing.value.split(',');
  store.dispatch(newRecipe(t.value, ingArr, dir.value))
  $('.form')[0].reset();
  let jStr = JSON.stringify(store.getState())
  localStorage.setItem('recipelist', jStr)
}

function deleteRecipe(title) {
  store.dispatch(delRecipe(title))
  let jStr = JSON.stringify(store.getState())
  localStorage.setItem('recipelist', jStr)
}

const App = () => (
  <div>
    <h1>Recipe Box</h1>
    <RecipeList/>
    <AddRecipeButton/>
  </div>
);
const store = Redux.createStore(recipesReducer, recipes(), window.devToolsExtension ? window.devToolsExtension() : undefined);
ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
/*
$(window).bind('beforeunload', function(){
   
  return confirm('do you really wnat to exit bruh?')
 
});
*/
