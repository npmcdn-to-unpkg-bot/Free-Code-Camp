let data = [];

d3.json('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json', function(retData) {
  data = retData.data;

  const formatCurrency = d3.format('$, .2f');
  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  const margin = {
    top: 10,
    right: 50,
    bottom: 80,
    left: 100
  };
  const height = 500 - margin.top - margin.bottom;
  const width = 1000 - margin.left - margin.right;
  const barWidth = Math.floor(width / data.length);
  const minDate = new Date(data[0][0]);
  const maxDate = new Date(data[274][0]);

  const xScale = d3.time.scale()
    .domain([minDate, maxDate])
    .range([0, width]);
  const yScale = d3.scale.linear()
    .range([height, 0])
    .domain([0, d3.max(data, function(d) {
      return d[1]
    })]);
  const xAxis = d3.svg.axis()
    .scale(xScale)
    .orient('bottom')
    .ticks(d3.time.years, 5);
  const yAxis = d3.svg.axis()
    .scale(yScale)
    .orient('left');

  const svg = d3.select('.graph')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
  svg.append('g')
    .attr('class', 'x axis')
    .call(xAxis)
    .attr('transform', 'translate(0,' + height + ')');
  svg.append('g')
    .attr('class', 'y axis')
    .call(yAxis)
    .append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 22)
    .attr('x', -175)
    /*   FREE CODE CAMP SOLUTION TO ABOVE 
.attr("y", 6)
      .attr("dy", "0.8em")
      .style("text-anchor", "end")
*/

  .text("GDP USA ( BILLIONS )");
  const cardPanel = d3.select('.card');
  const info = cardPanel.append('div')
    .style('opacity', 0)
    .attr('class', 'info');

  svg.selectAll('.bar')
    .data(data)
    .enter().append('rect')
    .attr('width', barWidth)
    .attr('class', 'bar')
    .attr('height', function(d) {
      return height - yScale(d[1])
    })
    .attr('x', function(d) {
      return xScale(new Date(d[0]))
    })
    .attr('y', function(d) {
      return yScale(d[1])
    })
    .on('mouseover', function(d) {
      let self = d3.select(this)
      self.classed('active', true)
      var date = new Date(d[0]);
      let gdp = d[1];
      let year = date.getFullYear();
      let month = date.getMonth();
      info.transition()
        .duration(200)
        .style('opacity', 0.98)
      info.html('<h4>' + months[month] + ' ' + year + '</h4>' +
          '<h5> ' + formatCurrency(gdp) + '  &nbsp;Billion</h5>'
        )
        .style('left', d3.event.pageX + 5 + 'px')
        .style('top', d3.event.pageY - 50 + 'px');

    })
    .on('mouseout', function(d) {
      let self = d3.select(this)
      self.classed('active', false)
      info.transition()
        .duration(500)
        .style('opacity', 0);
    });

});
var svgz = $('.graph'),
  aspect = svgz.width() / svgz.height(),
  container = svgz.parent();
$(window).on('resize', function() {
  let targetWidth = container.width();
  svgz.attr('width', targetWidth);
  svgz.attr('height', Math.round(targetWidth / aspect));
}).trigger('resize');